{"version":3,"sources":["data/firearms.js","appSlice.js","components/Chart.js","components/D3Graph.js","components/Firearm.js","components/Firearms.js","components/Round.js","components/Rounds.js","components/Target.js","components/Weather.js","App.js","store.js","serviceWorker.js","index.js","app.module.css"],"names":["FIREARMS","id","name","elevationTurretGradients","reticleUnits","rounds","bulletBC","bulletDiameterInches","bulletWeightGrains","muzzleVelocityFPS","sightHeightInches","turretUnits","windageTurretGradients","zeroRangeUnits","zeroRange","initialfirearms","firearmsJson","localStorage","getItem","utilities","jsonParseNumbers","setItem","JSON","stringify","initialTarget","targetJson","distanceUnits","distance","chartStepping","sizeInches","sizeMils","slantDegrees","speedMPH","initialWeather","weatherJson","altitudeFeet","temperatureDegreesFahrenheit","barometricPressureInchesHg","relativeHumidityPercent","windVelocityMPH","windAngleDegrees","appSlice","createSlice","initialState","firearmId","firearms","roundId","target","weather","reducers","deleteFirearm","state","action","payload","firearmIndex","findIndex","f","splice","deleteRound","roundIndex","r","insertFirearm","firearm","guid","push","sort","nameSort","insertRound","round","selectFirearm","removeItem","selectRound","updateFirearm","updateFirearms","updateRound","updateTarget","updateWeather","actions","selectorFirearmId","app","selectorFirearms","selectorRoundId","selectorTarget","selectorWeather","Chart","props","useState","isOpen","setIsOpen","showMil","showMoA","showIPHY","speedOfSound","atmospherics","className","onClick","data-toggle","title","rangeData","map","range","index","key","velocityFPS","rangeYards","rangeMeters","toFixed","energyFtLbs","timeSeconds","dropInches","verticalPositionInches","verticalPositionMil","verticalPositionMoA","verticalPositionIPHY","crossWindDriftInches","crossWindDriftMil","leadInches","leadMil","slantDropInches","slantMil","D3Graph","d3Container","useRef","useEffect","tooltip","d3","append","attr","style","d3Utils","draw","data","el","current","height","labels","padding","type","warningLevel","width","xKey","xToFixed","xType","yKey","yToFixed","zKey","ref","Firearm","useForm","mode","register","errors","handleSubmit","onSubmit","hidden","defaultValue","htmlFor","maxLength","minLength","placeholder","value","message","required","max","min","step","onClose","onDelete","Firearms","onSelect","onAdd","Round","Rounds","Target","getValues","setValue","setDistance","values","distanceYards","conversions","sizeToDistance","Math","yardsToMeters","onBlur","a","Weather","App","toast","configure","dispatch","useDispatch","useSelector","graphType","setGraphType","find","getFirearm","length","getRound","ballistics","getRangeData","css","onChange","event","files","reader","FileReader","onloadend","importedState","result","toString","console","log","readAsText","error","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","multiple","accept","json","blob","Blob","href","URL","createObjectURL","link","document","createElement","download","body","appendChild","click","removeChild","success","position","handleWeatherOnSubmit","handleTargetOnSubmit","handleFirearmOnSelect","Fragment","undefined","handleFirearmOnDelete","handleFirearmOnSubmit","handleRoundOnSelect","handleRoundOnDelete","handleRoundOnSubmit","configureStore","reducer","appReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","module","exports"],"mappings":"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","file":"static/js/main.5f746350.chunk.js","sourcesContent":["const FIREARMS = [\r\n\t{\r\n\t\tid: '8f331a2c-ef70-4a64-a028-276bf27523c4',\r\n\t\tname: '10/22',\r\n\t\televationTurretGradients: 2, // MoA and IPHY are 1, 2 or 4 displayed as 1, 1/2, 1/4 per click\r\n\t\treticleUnits: 'MoA', // 0=Mil, 1=MoA, 2=IPHY\r\n\t\trounds: [\r\n\t\t\t{\r\n\t\t\t\tid: 'e67e903e-2a22-4cfc-a1a9-e9c92adf6e5b',\r\n\t\t\t\tname: 'Federal',\r\n\t\t\t\tbulletBC: 0.13,\r\n\t\t\t\tbulletDiameterInches: 0.22,\r\n\t\t\t\tbulletWeightGrains: 40,\r\n\t\t\t\tmuzzleVelocityFPS: 1255\r\n\t\t\t}\r\n\t\t],\r\n\t\tsightHeightInches: 1.5,\r\n\t\tturretUnits: 'MoA',\r\n\t\twindageTurretGradients: 2,\r\n        zeroRangeUnits: 'Yards',\r\n\t\tzeroRange: 50\r\n\t},\r\n\t{\r\n\t\tid: '8a6b05a9-ecb7-4f62-8a73-c07df86209e5',\r\n\t\tname: 'CTR',\r\n\t\televationTurretGradients: 10,\r\n\t\treticleUnits: 'Mil',\r\n\t\trounds: [\r\n\t\t\t{\r\n\t\t\t\tid: 'ba665537-7653-43c0-82a6-6410972fee09',\r\n\t\t\t\tname: 'FGMM 69',\r\n\t\t\t\tbulletBC: 0.301,\r\n\t\t\t\tbulletDiameterInches: 0.224,\r\n\t\t\t\tbulletWeightGrains: 69,\r\n\t\t\t\tmuzzleVelocityFPS: 2810\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tid: '0cd716e3-a485-481c-addd-c96b70d43b4d',\r\n\t\t\t\tname: 'FGMM 77',\r\n\t\t\t\tbulletBC: 0.372,\r\n\t\t\t\tbulletDiameterInches: 0.224,\r\n\t\t\t\tbulletWeightGrains: 77,\r\n\t\t\t\tmuzzleVelocityFPS: 2580\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tid: 'a931c049-7771-45f6-8ede-5ea9d7674a2d',\r\n\t\t\t\tname: 'Handload 77',\r\n\t\t\t\tbulletBC: 0.372,\r\n\t\t\t\tbulletDiameterInches: 0.224,\r\n\t\t\t\tbulletWeightGrains: 77,\r\n\t\t\t\tmuzzleVelocityFPS: 2680\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tid: 'fe7c8d3e-3ed2-4614-832d-9dd4833fe4db',\r\n\t\t\t\tname: 'TAP 5.56',\r\n\t\t\t\tbulletBC: 0.354,\r\n\t\t\t\tbulletDiameterInches: 0.224,\r\n\t\t\t\tbulletWeightGrains: 75,\r\n\t\t\t\tmuzzleVelocityFPS: 2680\r\n\t\t\t}\r\n\t\t],\r\n\t\tsightHeightInches: 2,\r\n\t\tturretUnits: 'Mil',\r\n\t\twindageTurretGradients: 10,\r\n        zeroRangeUnits: 'Yards',\r\n\t\tzeroRange: 100\r\n\t},\r\n\t{\r\n\t\tid: '7d7f9e4d-7c33-4e04-ad1e-602e6f5d35f9',\r\n\t\tname: 'OBR',\r\n\t\televationTurretGradients: 10,\r\n\t\treticleUnits: 'Mil',\r\n\t\trounds: [\r\n\t\t\t{\r\n\t\t\t\tid: 'fb97d392-97cc-4289-80ad-fc1fc50e4ab3',\r\n\t\t\t\tname: 'FGGM 168',\r\n\t\t\t\tbulletBC: 0.462,\r\n\t\t\t\tbulletDiameterInches: 0.308,\r\n\t\t\t\tbulletWeightGrains: 168,\r\n\t\t\t\tmuzzleVelocityFPS: 2650\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tid: '0dadbe8f-599e-4fce-8a1f-0e273e5ab535',\r\n\t\t\t\tname: 'FGMM 175',\r\n\t\t\t\tbulletBC: 0.505,\r\n\t\t\t\tbulletDiameterInches: 0.308,\r\n\t\t\t\tbulletWeightGrains: 175,\r\n\t\t\t\tmuzzleVelocityFPS: 2600\r\n\t\t\t}\r\n\t\t],\r\n\t\tsightHeightInches: 2,\r\n\t\tturretUnits: 'Mil',\r\n\t\twindageTurretGradients: 10,\r\n        zeroRangeUnits: 'Yards',\r\n\t\tzeroRange: 100\r\n\t},\r\n\t{\r\n\t\tid: '479a565e-cfe9-4ddf-8bf2-292cf1b0ca4f',\r\n\t\tname: 'SPR',\r\n\t\televationTurretGradients: 10,\r\n\t\treticleUnits: 'Mil',\r\n\t\trounds: [\r\n\t\t\t{\r\n\t\t\t\tid: '93a7b0dc-c106-4fd5-8c68-16aa0caa7165',\r\n\t\t\t\tname: 'FGMM 69',\r\n\t\t\t\tbulletBC: 0.301,\r\n\t\t\t\tbulletDiameterInches: 0.224,\r\n\t\t\t\tbulletWeightGrains: 69,\r\n\t\t\t\tmuzzleVelocityFPS: 2950\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tid: 'abe8f65c-9e6b-4adf-8625-4f4ceab8cb1f',\r\n\t\t\t\tname: 'FGMM 77',\r\n\t\t\t\tbulletBC: 0.372,\r\n\t\t\t\tbulletDiameterInches: 0.224,\r\n\t\t\t\tbulletWeightGrains: 77,\r\n\t\t\t\tmuzzleVelocityFPS: 2720\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tid: '1f3303a9-8bd9-4e0b-bc4b-002073c2edf8',\r\n\t\t\t\tname: 'Handload 77',\r\n\t\t\t\tbulletBC: 0.372,\r\n\t\t\t\tbulletDiameterInches: 0.224,\r\n\t\t\t\tbulletWeightGrains: 77,\r\n\t\t\t\tmuzzleVelocityFPS: 2823\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tid: '98949310-8370-4807-af7a-16711831d7d7',\r\n\t\t\t\tname: 'TAP 5.56',\r\n\t\t\t\tbulletBC: 0.354,\r\n\t\t\t\tbulletDiameterInches: 0.224,\r\n\t\t\t\tbulletWeightGrains: 75,\r\n\t\t\t\tmuzzleVelocityFPS: 2821\r\n\t\t\t}\r\n\t\t],\r\n\t\tsightHeightInches: 2,\r\n\t\tturretUnits: 'Mil',\r\n\t\twindageTurretGradients: 10,\r\n        zeroRangeUnits: 'Yards',\r\n\t\tzeroRange: 100\r\n\t}\r\n\r\n]\r\n\r\nexport default FIREARMS;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nimport utilities from 'pg-utilities'\r\nimport FIREARMS from './data/firearms';\r\n\r\n// Get initialState\r\nlet initialfirearms = null;\r\nconst firearmsJson = localStorage.getItem('firearms');\r\nif(firearmsJson) {\r\n    initialfirearms = utilities.jsonParseNumbers(firearmsJson);\r\n} else {\r\n    initialfirearms = FIREARMS;\r\n    localStorage.setItem('firearms', JSON.stringify(initialfirearms));\r\n}\r\nlet initialTarget = null;\r\nconst targetJson = localStorage.getItem('target');\r\nif(targetJson) {\r\n    initialTarget = utilities.jsonParseNumbers(targetJson);\r\n} else {\r\n    initialTarget = {\r\n        distanceUnits: 'Yards', // Yards or Meters\r\n        distance: 1000,\r\n        chartStepping: 50,\r\n        sizeInches: 40,\r\n        sizeMils: null,\r\n        slantDegrees: 45,\r\n        speedMPH: 3\r\n    };\r\n    localStorage.setItem('target', JSON.stringify(initialTarget));\r\n}\r\nlet initialWeather = null;\r\nconst weatherJson = localStorage.getItem('weather');\r\nif(weatherJson) {\r\n    initialWeather = utilities.jsonParseNumbers(weatherJson);\r\n} else {\r\n    initialWeather = {\r\n        altitudeFeet: 0,\r\n        temperatureDegreesFahrenheit: 59,\r\n        barometricPressureInchesHg: 29.53,\r\n        relativeHumidityPercent: 78,\r\n        windVelocityMPH: 10,\r\n        windAngleDegrees: 90\r\n    };\r\n    localStorage.setItem('weather', JSON.stringify(initialWeather));\r\n}\r\n\r\n////////////////////////////////////////////////////////////////////////////////////////////\r\n// Use createAsyncThunk() if adding any async side effects to a reducer\r\n// https://redux-toolkit.js.org/api/createAsyncThunk\r\n////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\nexport const appSlice = createSlice({\r\n  name: 'app',\r\n  initialState: {\r\n    firearmId: localStorage.getItem('firearmId'), // GUID or null (none) or Blank (add)\r\n    firearms: initialfirearms,\r\n    roundId: localStorage.getItem('roundId'), // GUID or null (none) or Blank (add)\r\n    target: initialTarget,\r\n    weather: initialWeather\r\n  },\r\n  reducers: {\r\n    // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n    // doesn't actually mutate the state because it uses the Immer library,\r\n    // which detects changes to a \"draft state\" and produces a brand new\r\n    // immutable state based off those changes\r\n    deleteFirearm: (state, action) => {\r\n        // action must pass firearmId\r\n        let firearmId = action.payload;\r\n        const firearmIndex = state.firearms.findIndex((f) => f.id===firearmId);\r\n        if(firearmIndex !== -1) {                    \r\n            state.firearms = state.firearms.splice(firearmIndex, 1);\r\n            localStorage.setItem('firearms', JSON.stringify(state.firearms));\r\n        }\r\n    },\r\n    deleteRound: (state, action) => {\r\n        // action must pass firearmId and roundId\r\n        let firearmId = action.payload.firearmId;\r\n        let roundId = action.payload.roundId;\r\n        const firearmIndex = state.firearms.findIndex((f) => f.id===firearmId);\r\n        if(firearmIndex !== -1) {\r\n            const roundIndex = state.firearms[firearmIndex].rounds.findIndex((r) => r.id===roundId);\r\n            if(roundIndex !== -1) {\r\n                state.firearms[firearmIndex].rounds.splice(roundIndex, 1);\r\n                localStorage.setItem('firearms', JSON.stringify(state.firearms));\r\n            }\r\n        }\r\n    },\r\n    insertFirearm: (state, action) => {\r\n        // action must pass firearm\r\n        let firearm = action.payload;\r\n        if(firearm.id==='Add') {\r\n            // Make sure it does not already exist\r\n            let firearmIndex = state.firearms.findIndex((f) => f.name===firearm.name);\r\n            if(firearmIndex === -1) {\r\n                firearm.id = utilities.guid();\r\n                state.firearms.push(firearm);\r\n                state.firearms.sort(utilities.nameSort);\r\n                localStorage.setItem('firearms', JSON.stringify(state.firearms));\r\n            }\r\n        }\r\n    },\r\n    insertRound: (state, action) => {\r\n        // action must pass firearmId and round\r\n        let firearmId = action.payload.firearmId;\r\n        let round = action.payload.round;\r\n        const firearmIndex = state.firearms.findIndex((f) => f.id===firearmId);\r\n        if(firearmIndex !== -1) {\r\n            if(round.id==='Add') {\r\n                // Make sure it does not already exist\r\n                let roundIndex = state.firearms[firearmIndex].rounds.findIndex((r) => r.name===round.name);\r\n                if(roundIndex === -1) {\r\n                    round.id = utilities.guid();\r\n                    state.firearms[firearmIndex].rounds.push(round);\r\n                    state.firearms[firearmIndex].rounds.sort(utilities.nameSort);\r\n                    localStorage.setItem('firearms', JSON.stringify(state.firearms));\r\n                }\r\n            }\r\n        }\r\n    },\r\n    selectFirearm: (state, action) => {\r\n        // action must pass firearmId\r\n        const firearmId = action.payload;\r\n        state.firearmId = null;\r\n        localStorage.removeItem('firearmId');\r\n        if(firearmId != null) {\r\n            const firearmIndex = state.firearms.findIndex((f) => f.id===firearmId);\r\n            if(firearmIndex !== -1 || firearmId === 'Add') {\r\n                state.firearmId = firearmId;\r\n                localStorage.setItem('firearmId', firearmId);                    \r\n            }\r\n        }\r\n    },\r\n    selectRound: (state, action) => {\r\n        // action must pass roundId.  firearmId must already have been selected\r\n        const roundId = action.payload;\r\n        state.roundId = null;\r\n        localStorage.removeItem('roundId');\r\n        if(roundId != null) {\r\n            const firearmIndex = state.firearms.findIndex((f) => f.id===state.firearmId);\r\n            if(firearmIndex !== -1) {\r\n                const roundIndex = state.firearms[firearmIndex].rounds.findIndex((r) => r.id===roundId);\r\n                if(roundIndex !== -1 || roundId === 'Add') {\r\n                    state.roundId = roundId;\r\n                    localStorage.setItem('roundId', roundId);                    \r\n                }\r\n            }\r\n        }\r\n    },\r\n    updateFirearm: (state, action) => {\r\n        // action must pass firearm\r\n        let firearm = action.payload;\r\n        const firearmIndex = state.firearms.findIndex((f) => f.id===firearm.id);\r\n        if(firearmIndex !== -1) {\r\n            state.firearms[firearmIndex] = firearm;\r\n            localStorage.setItem('firearms', JSON.stringify(state.firearms));\r\n        }\r\n    },\r\n    updateFirearms: (state, action) => {\r\n        // action must pass firearms\r\n        state.firearms = action.payload;\r\n        localStorage.setItem('firearms', JSON.stringify(state.firearms));\r\n    },\r\n    updateRound: (state, action) => {\r\n        // action must pass firearmId and round\r\n        let firearmId = action.payload.firearmId;\r\n        let round = action.payload.round;\r\n        const firearmIndex = state.firearms.findIndex((f) => f.id===firearmId);\r\n        if(firearmIndex !== -1) {\r\n            let roundIndex = state.firearms[firearmIndex].rounds.findIndex((r) => r.name===round.name);\r\n            if(roundIndex === -1) {\r\n                state.firearms[firearmIndex].rounds[roundIndex] = round;\r\n                localStorage.setItem('firearms', JSON.stringify(state.firearms));\r\n            }\r\n        }\r\n    },\r\n    // case 'UPDATE_ROUND': {\r\n    //     // action must pass firearmId and round\r\n    //     return state;\r\n    // }\r\n    updateTarget: (state, action) => {\r\n        // action must pass target object\r\n        state.target = action.payload;\r\n        localStorage.setItem('target', JSON.stringify(state.target));\r\n    },\r\n    updateWeather: (state, action) => {\r\n        // action must pass weather object\r\n        state.weather = action.payload;\r\n        localStorage.setItem('weather', JSON.stringify(state.weather));\r\n    }\r\n  }\r\n});\r\n\r\nexport const {\r\n    deleteFirearm,\r\n    deleteRound,\r\n    insertFirearm,\r\n    insertRound,\r\n    selectFirearm,\r\n    selectRound,\r\n    updateFirearm,\r\n    updateFirearms,\r\n    updateRound,\r\n    updateTarget,\r\n    updateWeather\r\n } = appSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\n// export const incrementAsync = amount => dispatch => {\r\n//   setTimeout(() => {\r\n//     dispatch(incrementByAmount(amount));\r\n//   }, 1000);\r\n// };\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectorFirearmId = state => state.app.firearmId;\r\nexport const selectorFirearms = state => state.app.firearms;\r\nexport const selectorRoundId = state => state.app.roundId;\r\nexport const selectorTarget = state => state.app.target;\r\nexport const selectorWeather = state => state.app.weather;\r\n\r\nexport default appSlice.reducer;\r\n","import React, { useState } from 'react';\r\nimport './chart.css'\r\nimport atmospherics from 'pg-atmospherics';\r\n\r\nconst Chart = (props) => {\r\n    /*\r\n    props = {\r\n        firearm: {\r\n\t        name\r\n\t        reticleUnits\r\n\t        turretUnits\r\n            ...\r\n        }\r\n        rangeData: [{\r\n            rangeMeters\r\n            rangeYards\r\n            velocityFPS\r\n            energyFtLbs\r\n            timeSeconds\r\n            dropInches\r\n            verticalPositionInches\r\n            crossWindDriftInches\r\n            leadInches\r\n            slantDegrees\r\n            // All the remaining properties are computed\r\n            verticalPositionMil\r\n            verticalPositionMoA\r\n            verticalPositionIPHY\r\n            crossWindDriftMil\r\n            crossWindDriftMoA\r\n            crossWindDriftIPHY\r\n            leadMil\r\n            leadMoA\r\n            leadIPHY\r\n            slantDropInches\r\n            slantMil\r\n            slantMoA\r\n            slantIPHY\r\n        }]\r\n        round: {\r\n            name\r\n            ...\r\n        }\r\n        target: {\r\n            distanceUnits // Yards or Meters\r\n            slantDegrees\r\n            speedMPH\r\n            ...\r\n        }\r\n        weather: {\r\n           -altitudeFeet\r\n            -windVelocityMPH\r\n            -windAngleDegrees\r\n            ...\r\n        }\r\n    }]\r\n    */\r\n    const [isOpen, setIsOpen] = useState(true);\r\n    const showMil = props.firearm.turretUnits==='Mil' || props.firearm.reticleUnits==='Mil';\r\n    const showMoA = props.firearm.turretUnits==='MoA' || props.firearm.reticleUnits==='MoA';\r\n    const showIPHY = props.firearm.turretUnits==='IPHY' || props.firearm.reticleUnits==='IPHY';\r\n    const speedOfSound = atmospherics.speedOfSound(props.weather.altitudeFeet);\r\n    return (\r\n        <div className=\"bal-chart\">\r\n            <div className=\"card\">\r\n                <div className=\"card-heading bg-dark text-light d-flex p-2\">\r\n                    Range Chart - Firearm ({props.firearm.name}) - Round ({props.round.name})\r\n                    <i className={`fa fa-fw ml-auto ${isOpen ? 'fa-chevron-down' : 'fa-chevron-right'}`} onClick={() => setIsOpen(!isOpen)}></i>\r\n                </div>\r\n                <div className={`card-body ${!isOpen ? 'collapse' : null}`}>\r\n                    <div className=\"table-responsive\">\r\n                        <table className=\"table table-condensed table-striped table-hover font-size-small\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th data-toggle=\"tooltip\" title=\"Range in yards from the muzzle to the bullet\">\r\n                                        Range<br/>{props.target.distanceUnits==='Yards' ? '(yards)': '(meters)'}\r\n                                    </th>\r\n                                    <th data-toggle=\"tooltip\" title=\"Velocity of the bullet in feet per second\">\r\n                                        Velocity<br/>(FPS)\r\n                                    </th>\r\n                                    <th className=\"d-none d-sm-table-cell\" data-toggle=\"tooltip\" title=\"Energy of the bullet on impact\">\r\n                                        Energy<br/>(FtLbs)\r\n                                    </th>\r\n                                    <th className=\"d-none d-sm-table-cell\" data-toggle=\"tooltip\" title=\"Time the bullet has been in flight since leaving the muzzle\">\r\n                                        Time<br/>(sec)\r\n                                    </th>\r\n                                    <th className=\"d-none d-sm-table-cell\" data-toggle=\"tooltip\" title=\"Amount of bullet drop in relation to the muzzle angle not the ground\">\r\n                                        Drop<br/>(inch)\r\n                                    </th>\r\n                                    <th className='d-none d-md-table-cell' data-toggle=\"tooltip\" title=\"Bullet elevation above or below the target centerline\">\r\n                                        Elevation<br/>(inch)\r\n                                    </th>\r\n                                    {showMil ? \r\n                                        <th data-toggle=\"tooltip\" title=\"Bullet elevation above or below the target centerline\">\r\n                                            Elevation<br/>(Mil)\r\n                                        </th>\r\n                                        : null\r\n                                    }\r\n                                    {showMoA ? \r\n                                        <th data-toggle=\"tooltip\" title=\"Bullet elevation above or below the target centerline\">\r\n                                            Elevation<br/>(MoA)\r\n                                        </th>\r\n                                        : null\r\n                                    }\r\n                                    {showIPHY ? \r\n                                        <th data-toggle=\"tooltip\" title=\"Bullet elevation above or below the target centerline\">\r\n                                            Elevation<br/>(IPHY)\r\n                                        </th>\r\n                                        : null\r\n                                    }\r\n                                    <th className='d-none d-md-table-cell' data-toggle=\"tooltip\" title=\"Bullet drift left or right of the target centerline.  Drift is calculated at 90 degrees with velocity automatically adjusted from original wind direction.\">\r\n                                        Wind<br/>\r\n                                        {props.weather.windVelocityMPH} MPH<br/>\r\n                                        {props.weather.windAngleDegrees} deg<br/>\r\n                                        (inch)\r\n                                    </th>\r\n                                    {showMil ? \r\n                                        <th data-toggle=\"tooltip\" title=\"Bullet drift left or right of the target centerline.  Drift is calculated at 90 degrees with velocity automatically adjusted from original wind direction.\">\r\n                                            Wind<br/>\r\n                                            {props.weather.windVelocityMPH} MPH<br/>\r\n                                            {props.weather.windAngleDegrees} deg<br/>\r\n                                            (Mil)\r\n                                        </th>\r\n                                        : null\r\n                                    }\r\n                                    {showMoA ? \r\n                                        <th data-toggle=\"tooltip\" title=\"Bullet drift left or right of the target centerline.  Drift is calculated at 90 degrees with velocity automatically adjusted from original wind direction.\">\r\n                                            Wind<br/>\r\n                                            {props.weather.windVelocityMPH} MPH<br/>\r\n                                            {props.weather.windAngleDegrees} deg<br/>\r\n                                            (MoA)\r\n                                        </th>\r\n                                        : null\r\n                                    }\r\n                                    {showIPHY ? \r\n                                        <th data-toggle=\"tooltip\" title=\"Bullet drift left or right of the target centerline.  Drift is calculated at 90 degrees with velocity automatically adjusted from original wind direction.\">\r\n                                            Wind<br/>\r\n                                            {props.weather.windVelocityMPH} MPH<br/>\r\n                                            {props.weather.windAngleDegrees} deg<br/>\r\n                                            (IPHY)\r\n                                        </th>\r\n                                        : null\r\n                                    }\r\n                                    <th className='d-none d-md-table-cell' data-toggle=\"tooltip\" title=\"Amount of distance a moving target will cover during the time it takes for the bullet to travel from the muzzle to the target.\">\r\n                                        Lead<br/>\r\n                                        {props.target.speedMPH} MPH<br/>\r\n                                        (inch)\r\n                                    </th>\r\n                                    {showMil ? \r\n                                        <th data-toggle=\"tooltip\" title=\"Amount of distance a moving target will cover during the time it takes for the bullet to travel from the muzzle to the target.\">\r\n                                            Lead<br/>\r\n                                            {props.target.speedMPH} MPH<br/>\r\n                                            (Mil)\r\n                                        </th>\r\n                                        : null\r\n                                    }\r\n                                    {showMoA ? \r\n                                        <th data-toggle=\"tooltip\" title=\"Amount of distance a moving target will cover during the time it takes for the bullet to travel from the muzzle to the target.\">\r\n                                            Lead<br/>\r\n                                            {props.target.speedMPH} MPH<br/>\r\n                                            (MoA)\r\n                                        </th>\r\n                                        : null\r\n                                    }\r\n                                    {showIPHY ? \r\n                                        <th data-toggle=\"tooltip\" title=\"Amount of distance a moving target will cover during the time it takes for the bullet to travel from the muzzle to the target.\">\r\n                                            Lead<br/>\r\n                                            {props.target.speedMPH} MPH<br/>\r\n                                            (IPHY)\r\n                                        </th>\r\n                                        : null\r\n                                    }\r\n                                    <th className='d-none d-md-table-cell' data-toggle=\"tooltip\" title=\"Amount you will need to hold low on a target that is of either a higher or lower elevation than the shooting position.  Always aim low for both up and down slants.\">\r\n                                        Slant<br/>\r\n                                        {props.target.slantDegrees} deg<br/>\r\n                                        (inch)\r\n                                    </th>\r\n                                    {showMil ? \r\n                                        <th data-toggle=\"tooltip\" title=\"Amount you will need to hold low on a target that is of either a higher or lower elevation than the shooting position.  Always aim low for both up and down slants.\">\r\n                                            Slant<br/>\r\n                                            {props.target.slantDegrees} deg<br/>\r\n                                            (Mil)\r\n                                        </th>\r\n                                        : null\r\n                                    }\r\n                                    {showMoA ? \r\n                                        <th data-toggle=\"tooltip\" title=\"Amount you will need to hold low on a target that is of either a higher or lower elevation than the shooting position.  Always aim low for both up and down slants.\">\r\n                                            Slant<br/>\r\n                                            {props.target.slantDegrees} deg<br/>\r\n                                            (MoA)\r\n                                        </th>\r\n                                        : null\r\n                                    }\r\n                                    {showIPHY ? \r\n                                        <th data-toggle=\"tooltip\" title=\"Amount you will need to hold low on a target that is of either a higher or lower elevation than the shooting position.  Always aim low for both up and down slants.\">\r\n                                            Slant<br/>\r\n                                            {props.target.slantDegrees} deg<br/>\r\n                                            (IPHY)\r\n                                        </th>\r\n                                        : null\r\n                                    }\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {props.rangeData.map((range, index) => (\r\n                                    <tr key={index} className={range.velocityFPS<=speedOfSound ? 'text-danger' : range.velocityFPS<=speedOfSound*1.2 && range.velocityFPS>speedOfSound ? 'text-warning' : null}>\r\n                                        <td>{props.target.distanceUnits==='Yards' ? range.rangeYards : range.rangeMeters}</td>\r\n                                        <td>{range.velocityFPS.toFixed(0)}</td>\r\n                                        <td className=\"d-none d-sm-table-cell\">{range.energyFtLbs.toFixed(0)}</td>\r\n                                        <td className=\"d-none d-sm-table-cell\">{range.timeSeconds.toFixed(3)}</td>\r\n                                        <td className=\"d-none d-sm-table-cell\">{range.dropInches.toFixed(1)}</td>\r\n                                        <td className='d-none d-md-table-cell'>{range.verticalPositionInches.toFixed(1)}</td>\r\n                                        {showMil ?\r\n                                            <td>{range.verticalPositionMil.toFixed(1)}</td>\r\n                                            : null\r\n                                        }\r\n                                        {showMoA ?\r\n                                            <td>{range.verticalPositionMoA.toFixed(1)}</td>\r\n                                            : null\r\n                                        }\r\n                                        {showIPHY ?\r\n                                            <td>{range.verticalPositionIPHY.toFixed(1)}</td>\r\n                                            : null\r\n                                        }\r\n                                        <td className='d-none d-md-table-cell'>{range.crossWindDriftInches.toFixed(1)}</td>\r\n                                        {showMil ?\r\n                                            <td>{range.crossWindDriftMil.toFixed(1)}</td>\r\n                                            : null\r\n                                        }\r\n                                        {showMoA ?\r\n                                            <td>{range.crossWindDriftMil.toFixed(1)}</td>\r\n                                            : null\r\n                                        }\r\n                                        {showIPHY ?\r\n                                            <td>{range.crossWindDriftMil.toFixed(1)}</td>\r\n                                            : null\r\n                                        }\r\n                                        <td className='d-none d-md-table-cell'>{range.leadInches.toFixed(1)}</td>\r\n                                        {showMil ?\r\n                                            <td>{range.leadMil.toFixed(1)}</td>\r\n                                            : null\r\n                                        }\r\n                                        {showMoA ?\r\n                                            <td>{range.leadMil.toFixed(1)}</td>\r\n                                            : null\r\n                                        }\r\n                                        {showIPHY ?\r\n                                            <td>{range.leadMil.toFixed(1)}</td>\r\n                                            : null\r\n                                        }\r\n                                        <td className='d-none d-md-table-cell'>{range.slantDropInches.toFixed(1)}</td>\r\n                                        {showMil ?\r\n                                            <td>{range.slantMil.toFixed(1)}</td>\r\n                                            : null\r\n                                        }\r\n                                        {showMoA ?\r\n                                            <td>{range.slantMil.toFixed(1)}</td>\r\n                                            : null\r\n                                        }\r\n                                        {showIPHY ?\r\n                                            <td>{range.slantMil.toFixed(1)}</td>\r\n                                            : null\r\n                                        }\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n                <div className=\"card-footer text-light d-flex p-2 justify-content-around\">\r\n                    <span className=\"text-warning\">Orange text denotes transnonic flight</span>\r\n                    <span className=\"text-danger\">Red text denotes subsonic flight</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Chart;\r\n","import React, { useRef, useEffect } from 'react';\r\nimport './d3graph.css'\r\n\r\nimport * as d3 from 'd3'\r\n\r\nimport d3Utils from 'pg-d3-utils';\r\n\r\nconst D3Graph = (props) => {\r\n    /* The useRef Hook creates a variable that \"holds on\" to a value across rendering\r\n       passes. In this case it will hold our component's SVG DOM element. It's\r\n       initialized null and React will assign it later (see the return statement) */\r\n    const d3Container = useRef(null);\r\n\r\n    /* The useEffect Hook is for running side effects outside of React,\r\n       for instance inserting elements into the DOM using D3 */\r\n    useEffect(\r\n        () => {\r\n            // Create a tooltip that will remain hidden until hover\r\n            const tooltip = d3.select('body')\r\n                .append('div')\r\n                .attr('class', 'd3-tooltip')\r\n                .style('opacity', 0)\r\n                .style('pointer-events', 'none')\r\n                .style('position', 'absolute');\r\n            // Set initial values from querystring if they existing\r\n            d3Utils.draw({\r\n                data: props.data, // this.abs(this.data, this.yKey)\r\n                el: d3Container.current,\r\n                height: props.height,\r\n                labels: props.labels,\r\n                padding: 50,\r\n                tooltip,\r\n                type: props.type,\r\n                warningLevel: props.warningLevel,\r\n                width: props.width,\r\n                xKey: props.xKey,\r\n                xToFixed: props.xToFixed,\r\n                xType: props.xType,\r\n                yKey: props.yKey,\r\n                yToFixed: props.yToFixed,\r\n                zKey: null\r\n            });\r\n        },[props.data, props.height, props.labels, props.padding, props.type, props.warningLevel, props.width, props.xKey, props.xToFixed, props.xType, props.yKey, props.yToFixed, props.zKey]\r\n    )\r\n\r\n    return (\r\n        <div ref={d3Container} />\r\n    );\r\n}\r\n\r\nexport default D3Graph","import React, { useState } from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\nimport './form.css'\r\n\r\nconst Firearm = (props) => {\r\n    /*\r\n    props = {\r\n        firearm: {\r\n            id \r\n\t        name\r\n\t        elevationTurretGradients\r\n\t        reticleUnits\r\n\t        rounds\r\n\t        sightHeightInches\r\n\t        turretUnits\r\n\t        windageTurretGradients\r\n\t        zeroRangeUnits\r\n\t        zeroRange\r\n        }\r\n        onCancel()\r\n        onDelete()\r\n        onSubmit()\r\n    }\r\n    */\r\n    const [isOpen, setIsOpen] = useState(true);\r\n    const { register, errors, handleSubmit } = useForm({ mode: 'onBlur' });\r\n    return (\r\n        <div className=\"bal-form\">\r\n            <div className=\"card\">\r\n                <div className=\"card-heading bg-dark text-light d-flex p-2\">\r\n                    { props.firearm.id==='Add' ? `Add Firearm` : `Firearm - ${props.firearm.name}`}\r\n                    <i className={`fa fa-fw ml-auto ${isOpen ? 'fa-chevron-down' : 'fa-chevron-right'}`} onClick={() => setIsOpen(!isOpen)}></i>\r\n                </div>\r\n                <form onSubmit={handleSubmit(props.onSubmit)}>\r\n                    <div className={`card-body ${!isOpen ? 'collapse' : null}`}>\r\n                        <input hidden name=\"id\" defaultValue={props.firearm.id} type=\"text\" ref={register}/>\r\n                        <div className=\"form-group\">\r\n                            <label\r\n                                className=\"control-label\"\r\n                                htmlFor=\"name\"\r\n                                data-toggle=\"tooltip\"\r\n                                title=\"Name used to uniquely identify this firearm.\"\r\n                            >\r\n                                Name\r\n                            </label>\r\n                            <div className=\"input-group margin-bottom-sm\">\r\n                                <div className=\"input-group-prepend\"><div className=\"input-group-text\"><i className=\"fa fa-file-o fa-fw\"></i></div></div>\r\n                                <input\r\n                                    className=\"form-control\"\r\n                                    defaultValue={props.firearm.name}\r\n                                    maxLength=\"50\"\r\n                                    minLength=\"3\"\r\n                                    name=\"name\"\r\n                                    placeholder=\"Name\"\r\n                                    ref={register({\r\n                                        maxLength: { value: 50, message: \"Name has a maximum length of 50\" },\r\n                                        minLength: { value: 3, message: \"Name has a minimum length of 3\" },\r\n                                        required: \"Name is required\"\r\n                                    })}\r\n                                    required\r\n                                    type=\"text\"\r\n                                />\r\n                            </div>\r\n                            {errors.name && errors.name.message ?\r\n                                <div className=\"alert alert-danger\">\r\n                                    {errors.name.message}\r\n                                </div>\r\n                                : null\r\n                            }\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label\r\n                                className=\"control-label\"\r\n                                htmlFor=\"sightHeightInches\"\r\n                                data-toggle=\"tooltip\"\r\n                                title=\"Measured form bore centerline to scope centerline. Common heights are 1.5 to 2 inches.\"\r\n                            >\r\n                                Sight Height (inches)\r\n                            </label>\r\n                            <div className=\"input-group margin-bottom-sm\">\r\n                                <div className=\"input-group-prepend\"><div className=\"input-group-text\"><i className=\"fa fa-crosshairs fa-fw\"></i></div></div>\r\n                                <input\r\n                                    className=\"form-control\"\r\n                                    defaultValue={props.firearm.sightHeightInches}\r\n                                    max=\"5\"\r\n                                    min=\"0.25\"\r\n                                    name=\"sightHeightInches\"\r\n                                    placeholder=\"Sight Height (inches)\"\r\n                                    ref={register({\r\n                                        max: { value: 5, message: \"Sight Height has a maximum value of 5\" },\r\n                                        min: { value: 0.25, message: \"Sight Height has a minimum value of 0.25\" },\r\n                                        required: \"Sight Height is required\"\r\n                                    })}\r\n                                    required\r\n                                    step=\"0.05\"\r\n                                    type=\"number\"\r\n                                />\r\n                            </div>\r\n                            {errors.sightHeightInches && errors.sightHeightInches.message ?\r\n                                <div className=\"alert alert-danger\">\r\n                                    {errors.sightHeightInches.message}\r\n                                </div>\r\n                                : null\r\n                            }\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label\r\n                                className=\"control-label\"\r\n                                htmlFor=\"zeroRange\"\r\n                                data-toggle=\"tooltip\"\r\n                                title=\"Range at which scope has been adjusted for point of aim = point of impact.\"\r\n                            >\r\n                                Zero Range\r\n                            </label>\r\n                            <div className=\"input-group margin-bottom-sm\">\r\n                                <div className=\"input-group-prepend\"><div className=\"input-group-text\"><i className=\"fa fa-circle-o fa-fw\"></i></div></div>\r\n                                <input\r\n                                    className=\"form-control\"\r\n                                    defaultValue={props.firearm.zeroRange}\r\n                                    max=\"3000\"\r\n                                    min=\"25\"\r\n                                    name=\"zeroRange\"\r\n                                    placeholder=\"Zero Range\"\r\n                                    ref={register({\r\n                                        max: { value: 3000, message: \"Zero Range has a maximum value of 3000\" },\r\n                                        min: { value: 10, message: \"Zero Range has a minimum value of 10\" },\r\n                                        required: \"Zero Range is required, so bullet drop can be calculated properly\"\r\n                                    })}\r\n                                    required\r\n                                    type=\"number\"\r\n                                />\r\n                                <select\r\n                                    className=\"form-control\"\r\n                                    defaultValue={props.firearm.zeroRangeUnits}\r\n                                    name=\"zeroRangeUnits\"\r\n                                    ref={register({\r\n                                        required: true\r\n                                    })}\r\n                                >\r\n                                    <option value='Yards'>Yards</option>\r\n                                    <option value='Meters'>Meters</option>\r\n                                </select>\r\n                            </div>\r\n                            {errors.zeroRange && errors.zeroRange.message ?\r\n                                <div className=\"alert alert-danger\">\r\n                                    {errors.zeroRange.message}\r\n                                </div>\r\n                                : null\r\n                            }\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label\r\n                                className=\"control-label\"\r\n                                htmlFor=\"reticleUnits\"\r\n                                data-toggle=\"tooltip\"\r\n                                title=\"Scope crosshair hash mark separation.  Usually Minutes of Angle (MoA), Milliradian (Mil), or Inch Per Hundred Yards (IPHY).\"\r\n                            >\r\n                                Reticle Units\r\n                            </label>\r\n                            <div className=\"input-group margin-bottom-sm\">\r\n                                <div className=\"input-group-prepend\"><div className=\"input-group-text\"><i className=\"fa fa-spinner fa-fw\"></i></div></div>\r\n                                <select\r\n                                    className=\"form-control\"\r\n                                    defaultValue={props.firearm.reticleUnits}\r\n                                    name=\"reticleUnits\"\r\n                                    ref={register({\r\n                                        required: true\r\n                                    })}\r\n                                >\r\n                                    <option value='Mil'>Mil</option>\r\n                                    <option value='MoA'>MoA</option>\r\n                                    <option value='IPHY'>IPHY</option>\r\n                                </select>\r\n                            </div>\r\n                            {errors.reticleUnits && errors.reticleUnits.message ?\r\n                                <div className=\"alert alert-danger\">\r\n                                    {errors.reticleUnits.message}\r\n                                </div>\r\n                                : null\r\n                            }\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label\r\n                                className=\"control-label\"\r\n                                htmlFor=\"elevationTurretGradients\"\r\n                                data-toggle=\"tooltip\"\r\n                                title=\"Number of elevation (up/down) turret clicks per turret unit.  Usually refered to as a fraction (ex: 1/4 MoA = 4 clicks per MoA).\"\r\n                            >\r\n                                Elevation Turret (clicks per unit)\r\n                            </label>\r\n                            <div className=\"input-group margin-bottom-sm\">\r\n                                <div className=\"input-group-prepend\"><div className=\"input-group-text\"><i className=\"fa fa-align-center fa-fw\"></i></div></div>\r\n                                <select\r\n                                    className=\"form-control\"\r\n                                    defaultValue={props.firearm.elevationTurretGradients}\r\n                                    name=\"elevationTurretGradients\"\r\n                                    ref={register({\r\n                                        required: true\r\n                                    })}\r\n                                >\r\n                                    <option value='1'>1</option>\r\n                                    <option value='2'>2</option>\r\n                                    <option value='4'>4</option>\r\n                                    <option value='5'>5</option>\r\n                                    <option value='10'>10</option>\r\n                                </select>\r\n                                <select\r\n                                    className=\"form-control\"\r\n                                    defaultValue={props.firearm.turretUnits}\r\n                                    name=\"turretUnits\"\r\n                                    ref={register({\r\n                                        required: true\r\n                                    })}\r\n                                >\r\n                                    <option value='Mil'>Mil</option>\r\n                                    <option value='MoA'>MoA</option>\r\n                                    <option value='IPHY'>IPHY</option>\r\n                                </select>\r\n                            </div>\r\n                            {errors.elevationTurretGradients && errors.elevationTurretGradients.message ?\r\n                                <div className=\"alert alert-danger\">\r\n                                    {errors.elevationTurretGradients.message}\r\n                                </div>\r\n                                : null\r\n                            }\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label\r\n                                className=\"control-label\"\r\n                                htmlFor=\"windageTurretGradients\"\r\n                                data-toggle=\"tooltip\"\r\n                                title=\"Number of windage (up/down) turret clicks per turret unit.  Usually refered to as a fraction (ex: 1/4 MoA = 4 clicks per MoA).\"\r\n                            >\r\n                                Windage Turret (clicks per unit)\r\n                            </label>\r\n                            <div className=\"input-group margin-bottom-sm\">\r\n                                <div className=\"input-group-prepend\"><div className=\"input-group-text\"><i className=\"fa fa-repeat fa-fw\"></i></div></div>\r\n                                <select\r\n                                    className=\"form-control\"\r\n                                    defaultValue={props.firearm.windageTurretGradients}\r\n                                    name=\"windageTurretGradients\"\r\n                                    ref={register({\r\n                                        required: true\r\n                                    })}\r\n                                >\r\n                                    <option value='1'>1</option>\r\n                                    <option value='2'>2</option>\r\n                                    <option value='4'>4</option>\r\n                                    <option value='5'>5</option>\r\n                                    <option value='10'>10</option>\r\n                                </select>\r\n                                <select\r\n                                    className=\"form-control\"\r\n                                    defaultValue={props.firearm.turretUnits}\r\n                                    name=\"turretUnits\"\r\n                                    ref={register({\r\n                                        required: true\r\n                                    })}\r\n                                >\r\n                                    <option value='Mil'>Mil</option>\r\n                                    <option value='MoA'>MoA</option>\r\n                                    <option value='IPHY'>IPHY</option>\r\n                                </select>\r\n                            </div>\r\n                            {errors.windageTurretGradients && errors.windageTurretGradients.message ?\r\n                                <div className=\"alert alert-danger\">\r\n                                    {errors.windageTurretGradients.message}\r\n                                </div>\r\n                                : null\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                    <div className={`card-footer ${!isOpen ? 'collapse' : null}`}>\r\n                        <button className=\"btn btn-success\" type=\"submit\"><span className=\"fa fa-check\"></span> Save</button>&nbsp;\r\n                        <button className=\"btn btn-warning\" onClick={props.onClose}> Close</button>&nbsp;\r\n                        <button className=\"btn btn-danger\" onClick={props.onDelete}> Delete</button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Firearm;\r\n","import React, { useState } from 'react';\r\nimport './form.css'\r\n\r\nconst Firearms = (props) => {\r\n    /*\r\n    props = {\r\n        firearms: [{\r\n            id \r\n\t        name\r\n\t        ...\r\n        }]\r\n        onAdd()\r\n        onSelect()\r\n    }\r\n    */\r\n    const [isOpen, setIsOpen] = useState(true);\r\n    return (\r\n        <div className=\"bal-form\">\r\n            <div className=\"card\">\r\n                <div className=\"card-heading bg-dark text-light d-flex p-2\">\r\n                    Select Firearm\r\n                    <i className={`fa fa-fw ml-auto ${isOpen ? 'fa-chevron-down' : 'fa-chevron-right'}`} onClick={() => setIsOpen(!isOpen)}></i>\r\n                </div>\r\n                <div className={`card-body ${!isOpen ? 'collapse' : null}`}>\r\n                    <ul className=\"list-inline\">\r\n                        {props.firearms.map((firearm) => (\r\n                            <li onClick={() => props.onSelect(firearm)} className='card' key={firearm.id}>\r\n                                <div className=\"well\">\r\n                                    {firearm.name}\r\n                                </div>\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                </div>\r\n                <div className={`card-footer ${!isOpen ? 'collapse' : null}`}>\r\n                    <button className=\"btn btn-default\" onClick={() => props.onAdd()}><span className=\"fa fa-plus\"></span> Add Firearm</button>&nbsp;\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Firearms;\r\n","import React, { useState } from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\nimport './form.css'\r\n\r\nconst Round = (props) => {\r\n    /*\r\n    props = {\r\n        round: {\r\n            id\r\n            name\r\n            bulletDiameterInches\r\n            bulletWeightGrains\r\n            muzzleVelocityFPS\r\n        }\r\n        onCancel()\r\n        onDelete()\r\n        onSubmit()\r\n    }\r\n    */\r\n    const [isOpen, setIsOpen] = useState(true);\r\n    const { register, errors, handleSubmit } = useForm({ mode: 'onBlur' });\r\n    return (\r\n        <div className=\"bal-form\">\r\n            <div className=\"card\">\r\n                <div className=\"card-heading bg-dark text-light d-flex p-2\">\r\n                    { props.round.id==='Add' ? `Add Round` : `Round - ${props.round.name}`}\r\n                    <i className={`fa fa-fw ml-auto ${isOpen ? 'fa-chevron-down' : 'fa-chevron-right'}`} onClick={() => setIsOpen(!isOpen)}></i>\r\n                </div>\r\n                <form onSubmit={handleSubmit(props.onSubmit)}>\r\n                    <div className={`card-body ${!isOpen ? 'collapse' : null}`}>\r\n                        <input hidden name=\"id\" defaultValue={props.round.id} type=\"text\" ref={register}/>\r\n                        <div className=\"form-group\">\r\n                            <label\r\n                                className=\"control-label\"\r\n                                htmlFor=\"name\"\r\n                                data-toggle=\"tooltip\"\r\n                                title=\"Name used to identify this round unique to the firearm.\"\r\n                            >\r\n                                Name\r\n                            </label>\r\n                            <div className=\"input-group margin-bottom-sm\">\r\n                                <div className=\"input-group-prepend\"><div className=\"input-group-text\"><i className=\"fa fa-text-o fa-fw\"></i></div></div>\r\n                                <input\r\n                                    className=\"form-control\"\r\n                                    defaultValue={props.round.name}\r\n                                    maxLength=\"50\"\r\n                                    minLength=\"3\"\r\n                                    name=\"name\"\r\n                                    placeholder=\"Name\"\r\n                                    ref={register({\r\n                                        maxLength: { value: 50, message: \"Name has a maximum length of 50\" },\r\n                                        minLength: { value: 3, message: \"Name has a minimum length of 3\" },\r\n                                        required: \"Name is required\"\r\n                                    })}\r\n                                    required\r\n                                    type=\"text\"\r\n                                />\r\n                            </div>\r\n                            {errors.name && errors.name.message ?\r\n                                <div className=\"alert alert-danger\">\r\n                                    {errors.name.message}\r\n                                </div>\r\n                                : null\r\n                            }\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label\r\n                                className=\"control-label\"\r\n                                htmlFor=\"bulletDiameterInches\"\r\n                                data-toggle=\"tooltip\"\r\n                                title=\"Bullet diameter is required so wind resistance can be calculated properly.  Common diameters are 0.022 to 0.050 inches.\"\r\n                            >\r\n                                Bullet Diameter (inches)\r\n                            </label>\r\n                            <div className=\"input-group margin-bottom-sm\">\r\n                                <div className=\"input-group-prepend\"><div className=\"input-group-text\"><i className=\"fa fa-superpowers fa-fw\"></i></div></div>\r\n                                <input\r\n                                    className=\"form-control\"\r\n                                    defaultValue={props.round.bulletDiameterInches}\r\n                                    max=\"1\"\r\n                                    min=\"0.010\"\r\n                                    name=\"bulletDiameterInches\"\r\n                                    placeholder=\"Bullet Diameter (inches)\"\r\n                                    ref={register({\r\n                                        max: { value: 1, message: \"Bullet Diameter has a maximum value of 1\" },\r\n                                        min: { value: 0.010, message: \"Bullet Diameter has a minimum value of 0.010\" },\r\n                                        required: \"Bullet diameter is required so wind resistance can be calculated.\"\r\n                                    })}\r\n                                    required\r\n                                    step=\"0.001\"\r\n                                    type=\"number\"\r\n                                />\r\n                            </div>\r\n                            {errors.bulletDiameterInches && errors.bulletDiameterInches.message ?\r\n                                <div className=\"alert alert-danger\">\r\n                                    {errors.bulletDiameterInches.message}\r\n                                </div>\r\n                                : null\r\n                            }\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label\r\n                                className=\"control-label\"\r\n                                htmlFor=\"bulletWeightGrains\"\r\n                                data-toggle=\"tooltip\"\r\n                                title=\"Bullet weight is required, so inertia can be calculated properly.\"\r\n                            >\r\n                                Bullet Weight (grains)\r\n                            </label>\r\n                            <div className=\"input-group margin-bottom-sm\">\r\n                                <div className=\"input-group-prepend\"><div className=\"input-group-text\"><i className=\"fa fa-balance-scale fa-fw\"></i></div></div>\r\n                                <input\r\n                                    className=\"form-control\"\r\n                                    defaultValue={props.round.bulletWeightGrains}\r\n                                    max=\"1000\"\r\n                                    min=\"10\"\r\n                                    name=\"bulletWeightGrains\"\r\n                                    placeholder=\"Bullet Weight (grains)\"\r\n                                    ref={register({\r\n                                        max: { value: 1000, message: \"Bullet Weight has a maximum value of 1000\" },\r\n                                        min: { value: 10, message: \"Bullet Weight has a minimum value of 10\" },\r\n                                        required: \"Bullet Weight is required, so bullet drop can be calculated properly.\"\r\n                                    })}\r\n                                    required\r\n                                    step=\"1\"\r\n                                    type=\"number\"\r\n                                />\r\n                            </div>\r\n                            {errors.bulletWeightGrains && errors.bulletWeightGrains.message ?\r\n                                <div className=\"alert alert-danger\">\r\n                                    {errors.bulletWeightGrains.message}\r\n                                </div>\r\n                                : null\r\n                            }\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label\r\n                                className=\"control-label\"\r\n                                htmlFor=\"muzzleVelocityFPS\"\r\n                                data-toggle=\"tooltip\"\r\n                                title=\"Muzzle velocity is required, so bullet deceleration can be calculated properly.\"\r\n                            >\r\n                                Muzzle Velocity (FPS)\r\n                            </label>\r\n                            <div className=\"input-group margin-bottom-sm\">\r\n                                <div className=\"input-group-prepend\"><div className=\"input-group-text\"><i className=\"fa fa-signal fa-fw\"></i></div></div>\r\n                                <input\r\n                                    className=\"form-control\"\r\n                                    defaultValue={props.round.muzzleVelocityFPS}\r\n                                    max=\"5000\"\r\n                                    min=\"100\"\r\n                                    name=\"muzzleVelocityFPS\"\r\n                                    placeholder=\"Muzzle Velocity (FPS)\"\r\n                                    ref={register({\r\n                                        max: { value: 5000, message: \"Muzzle Velocity has a maximum value of 5000\" },\r\n                                        min: { value: 100, message: \"Muzzle Velocity has a minimum value of 100\" },\r\n                                        required: \"Muzzle Velocity is required, so bullet drop can be calculated properly.\"\r\n                                    })}\r\n                                    required\r\n                                    step=\"1\"\r\n                                    type=\"number\"\r\n                                />\r\n                            </div>\r\n                            {errors.muzzleVelocityFPS && errors.muzzleVelocityFPS.message ?\r\n                                <div className=\"alert alert-danger\">\r\n                                    {errors.muzzleVelocityFPS.message}\r\n                                </div>\r\n                                : null\r\n                            }\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label\r\n                                className=\"control-label\"\r\n                                htmlFor=\"bulletBC\"\r\n                                data-toggle=\"tooltip\"\r\n                                title=\"Bullet ballistic cooefficient is the aerodynamics of the bullet's ability to resist atmospheric density related deceleration.\"\r\n                            >\r\n                                Bullet Ballistic Cooefficient\r\n                            </label>\r\n                            <div className=\"input-group margin-bottom-sm\">\r\n                                <div className=\"input-group-prepend\"><div className=\"input-group-text\"><i className=\"fa fa-google-wallet fa-fw\"></i></div></div>\r\n                                <input\r\n                                    className=\"form-control\"\r\n                                    defaultValue={props.round.bulletBC}\r\n                                    max=\"1\"\r\n                                    min=\"0.010\"\r\n                                    name=\"bulletBC\"\r\n                                    placeholder=\"Bullet Ballistic Cooefficient\"\r\n                                    ref={register({\r\n                                        max: { value: 1, message: \"Bullet ballistic cooefficient has a maximum value of 1\" },\r\n                                        min: { value: 0.010, message: \"Bullet ballistic cooefficient has a minimum value of 0.010\" },\r\n                                        required: \"Bullet ballistic cooefficient is required, so wind resistance can be calculated properly.\"\r\n                                    })}\r\n                                    required\r\n                                    step=\"0.001\"\r\n                                    type=\"number\"\r\n                                />\r\n                            </div>\r\n                            {errors.bulletBC && errors.bulletBC.message ?\r\n                                <div className=\"alert alert-danger\">\r\n                                    {errors.bulletBC.message}\r\n                                </div>\r\n                                : null\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                    <div className={`card-footer ${!isOpen ? 'collapse' : null}`}>\r\n                        <button className=\"btn btn-success\" type=\"submit\"><span className=\"fa fa-check\"></span> Save</button>&nbsp;\r\n                        <button className=\"btn btn-warning\" onClick={props.onClose}> Close</button>&nbsp;\r\n                        <button className=\"btn btn-danger\" onClick={props.onDelete}> Delete</button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Round;\r\n","import React, { useState } from 'react';\r\nimport './form.css'\r\n\r\nconst Rounds = (props) => {\r\n    /*\r\n    props = {\r\n        rounds: [{\r\n            id\r\n            name\r\n            ...\r\n        }]\r\n        onAdd()\r\n        onSelect()\r\n    }\r\n    */\r\n    const [isOpen, setIsOpen] = useState(true);\r\n    return (\r\n        <div className=\"bal-form\">\r\n            <div className=\"card\">\r\n                <div className=\"card-heading bg-dark text-light d-flex p-2\">\r\n                    Select Round\r\n                    <i className={`fa fa-fw ml-auto ${isOpen ? 'fa-chevron-down' : 'fa-chevron-right'}`} onClick={() => setIsOpen(!isOpen)}></i>\r\n                </div>\r\n                <div className={`card-body ${!isOpen ? 'collapse' : null}`}>\r\n                    <ul className=\"list-inline\">\r\n                        {props.rounds.map((round) => (\r\n                            <li onClick={() => props.onSelect(round)} className='card' key={round.id}>\r\n                                <div className=\"well\">\r\n                                    {round.name}\r\n                                </div>\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                </div>\r\n                <div className={`card-footer ${!isOpen ? 'collapse' : null}`}>\r\n                    <button className=\"btn btn-default\" onClick={() => props.onAdd()}><span className=\"fa fa-plus\"></span> Add Round</button>&nbsp;\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Rounds;\r\n","import React, { useState } from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\nimport './form.css'\r\n\r\nimport conversions from 'pg-conversions';\r\n\r\nconst Target = (props) => {\r\n    /*\r\n    props = {\r\n        values: {\r\n            distanceUnits // Yards or Meters\r\n            distance\r\n            chartStepping\r\n            sizeInches\r\n            sizeMils\r\n            slantDegrees\r\n            speedMPH\r\n        }\r\n        onSubmit()\r\n    }\r\n    */\r\n    const [isOpen, setIsOpen] = useState(true);\r\n    const { register, errors, getValues, handleSubmit, setValue } = useForm({ mode: 'onBlur' });\r\n    const setDistance = () => {\r\n        const values = getValues();\r\n        // Given the size of a target in both inches and mils, will calculate and update the distance\r\n        if(values.sizeInches !== '' && values.sizeMils !== '') {\r\n            const distanceYards = conversions.sizeToDistance(values.sizeInches, values.sizeMils);\r\n            const distance = Math.round(values.distanceUnits===\"Yards\" ? distanceYards : conversions.yardsToMeters(distanceYards));\r\n            setValue('distance', distance);\r\n        }\r\n    }\r\n    return (\r\n        <div className=\"bal-form\">\r\n            <div className=\"card\">\r\n                <div className=\"card-heading bg-dark text-light d-flex p-2\">\r\n                    Target\r\n                    <i className={`fa fa-fw ml-auto ${isOpen ? 'fa-chevron-down' : 'fa-chevron-right'}`} onClick={() => setIsOpen(!isOpen)}></i>\r\n                </div>\r\n                <form onSubmit={handleSubmit(props.onSubmit)}>\r\n                    <div className={`card-body ${!isOpen ? 'collapse' : null}`}>\r\n                        <div className=\"form-group\">\r\n                            <label\r\n                                className=\"control-label\"\r\n                                htmlFor=\"distance\"\r\n                                data-toggle=\"tooltip\"\r\n                                title=\"Distance measured from the muzzle to the target.\"\r\n                            >\r\n                                Distance\r\n                            </label>\r\n                            <div className=\"input-group margin-bottom-sm\">\r\n                                <div className=\"input-group-prepend\"><div className=\"input-group-text\"><i className=\"fa fa-bullseye fa-fw\"></i></div></div>\r\n                                <input\r\n                                    className=\"form-control\"\r\n                                    defaultValue={props.values.distance}\r\n                                    max=\"5000\"\r\n                                    min=\"0\"\r\n                                    name=\"distance\"\r\n                                    onBlur={() => setValue('sizeMils', '')}\r\n                                    placeholder=\"Distance\"\r\n                                    ref={register({\r\n                                        max: { value: 5000, message: \"Distance has a maximum value of 5000\" },\r\n                                        min: { value: 0, message: \"Distance has a minimum value of 0\" },\r\n                                        required: \"Distance is required to determine how far out to calculate ballistics data\"\r\n                                    })}\r\n                                    required\r\n                                    type=\"number\"\r\n                                />\r\n                                <select\r\n                                    className=\"form-control\"\r\n                                    defaultValue={props.values.distanceUnits}\r\n                                    name=\"distanceUnits\"\r\n                                    ref={register({\r\n                                        required: true\r\n                                    })}\r\n                                >\r\n                                    <option value='Yards'>Yards</option>\r\n                                    <option value='Meters'>Meters</option>\r\n                                </select>\r\n                            </div>\r\n                            {errors.distance && errors.distance.message ?\r\n                                <div className=\"alert alert-danger\">\r\n                                    {errors.distance.message}\r\n                                </div>\r\n                                : null\r\n                            }\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label\r\n                                className=\"control-label\"\r\n                                htmlFor=\"sizeInches\"\r\n                                data-toggle=\"tooltip\"\r\n                                title=\"The size of the target in inches (optional).  Used in combination with the size of the target in Mils to determine the distance.\"\r\n                            >\r\n                                Size (Inches / Mils) - optional\r\n                            </label>\r\n                            <div className=\"input-group margin-bottom-sm\">\r\n                                <div className=\"input-group-prepend\"><div className=\"input-group-text\"><i className=\"fa fa-ellipsis-v fa-fw\"></i></div></div>\r\n                                <input\r\n                                    className=\"form-control\"\r\n                                    defaultValue={props.values.sizeInches}\r\n                                    max=\"120\"\r\n                                    min=\"1\"\r\n                                    name=\"sizeInches\"\r\n                                    placeholder=\"Size (inches)\"\r\n                                    onBlur={async () => setDistance()}\r\n                                    ref={register({\r\n                                        max: { value: 120, message: \"Size (inches) has a maximum value of 120\" },\r\n                                        min: { value: 1, message: \"Size (inches) has a minimum value of 1\" },\r\n                                    })}\r\n                                    type=\"number\"\r\n                                />\r\n                                <input\r\n                                    className=\"form-control\"\r\n                                    defaultValue={props.values.sizeMils}\r\n                                    max=\"100\"\r\n                                    min=\"0.1\"\r\n                                    name=\"sizeMils\"\r\n                                    onBlur={() => setDistance()}\r\n                                    placeholder=\"Size (mils)\"\r\n                                    ref={register({\r\n                                        max: { value: 100, message: \"Size (mils) has a maximum value of 100\" },\r\n                                        min: { value: 0.1, message: \"Size (mils) has a minimum value of 0.1\" },\r\n                                    })}\r\n                                    step=\"0.1\"\r\n                                    type=\"number\"\r\n                                />\r\n                            </div>\r\n                            {errors.sizeInches && errors.sizeInches.message ?\r\n                                <div className=\"alert alert-danger\">\r\n                                    {errors.sizeInches.message}\r\n                                </div>\r\n                                : null\r\n                            }\r\n                            {errors.sizeMils && errors.sizeMils.message ?\r\n                                <div className=\"alert alert-danger\">\r\n                                    {errors.sizeMils.message}\r\n                                </div>\r\n                                : null\r\n                            }\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label\r\n                                className=\"control-label\"\r\n                                htmlFor=\"chartStepping\"\r\n                                data-toggle=\"tooltip\"\r\n                                title=\"Chart stepping is required to determine how many rows to calculate.\"\r\n                            >\r\n                                Chart Stepping (yards)\r\n                            </label>\r\n                            <div className=\"input-group margin-bottom-sm\">\r\n                                <div className=\"input-group-prepend\"><div className=\"input-group-text\"><i className=\"fa fa-bars fa-fw\"></i></div></div>\r\n                                <input\r\n                                    className=\"form-control\"\r\n                                    defaultValue={props.values.chartStepping}\r\n                                    max=\"500\"\r\n                                    min=\"10\"\r\n                                    name=\"chartStepping\"\r\n                                    placeholder=\"Chart Stepping (yards)\"\r\n                                    ref={register({\r\n                                        max: { value: 500, message: \"Chart Stepping has a maximum value of 500\" },\r\n                                        min: { value: 10, message: \"Chart Stepping has a minimum value of 10\" },\r\n                                        required: \"Chart Stepping is required to determine how many rows to calculate\"\r\n                                    })}\r\n                                    required\r\n                                    type=\"number\"\r\n                                />\r\n                            </div>\r\n                            {errors.chartStepping && errors.chartStepping.message ?\r\n                                <div className=\"alert alert-danger\">\r\n                                    {errors.chartStepping.message}\r\n                                </div>\r\n                                : null\r\n                            }\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label\r\n                                className=\"control-label\"\r\n                                htmlFor=\"slantDegrees\"\r\n                                data-toggle=\"tooltip\"\r\n                                title=\"The angle versus horizontal as measured between the muzzle and target.  Slant degrees is required to determine vertical hold over or angle scope adjustments needed.  Both up and down slant angles result in the need to aim low.\"\r\n                            >\r\n                                Slant (degrees)\r\n                            </label>\r\n                            <div className=\"input-group margin-bottom-sm\">\r\n                                <div className=\"input-group-prepend\"><div className=\"input-group-text\"><i className=\"fa fa-location-arrow fa-fw\"></i></div></div>\r\n                                <input\r\n                                    className=\"form-control\"\r\n                                    defaultValue={props.values.slantDegrees}\r\n                                    max=\"500\"\r\n                                    min=\"10\"\r\n                                    name=\"slantDegrees\"\r\n                                    placeholder=\"Slant (degrees)\"\r\n                                    ref={register({\r\n                                        max: { value: 500, message: \"Slant has a maximum value of 500\" },\r\n                                        min: { value: 10, message: \"Slant has a minimum value of 10\" },\r\n                                        required: \"Slant is required to determine vertical hold over or angle scope adjustments needed.  Both up and down slant angles result in the need to aim low.\"\r\n                                    })}\r\n                                    required\r\n                                    type=\"number\"\r\n                                />\r\n                            </div>\r\n                            {errors.slantDegrees && errors.slantDegrees.message ?\r\n                                <div className=\"alert alert-danger\">\r\n                                    {errors.slantDegrees.message}\r\n                                </div>\r\n                                : null\r\n                            }\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label\r\n                                className=\"control-label\"\r\n                                htmlFor=\"speedMPH\"\r\n                                data-toggle=\"tooltip\"\r\n                                title=\"The speed the target is moving perpendicular to the line between the muzzle and target.  Target speed is required to determine horizontal lead hold or scope adjustments needed.\"\r\n                            >\r\n                                Speed (MPH)\r\n                            </label>\r\n                            <div className=\"input-group margin-bottom-sm\">\r\n                                <div className=\"input-group-prepend\"><div className=\"input-group-text\"><i className=\"fa fa-car fa-fw\"></i></div></div>\r\n                                <input\r\n                                    className=\"form-control\"\r\n                                    defaultValue={props.values.speedMPH}\r\n                                    max=\"500\"\r\n                                    min=\"1\"\r\n                                    name=\"speedMPH\"\r\n                                    placeholder=\"Speed (MPH)\"\r\n                                    ref={register({\r\n                                        max: { value: 500, message: \"Speed has a maximum value of 500\" },\r\n                                        min: { value: 1, message: \"Speed has a minimum value of 1\" },\r\n                                        required: \"Target speed is required to determine horizontal lead hold or scope adjustments needed.\"\r\n                                    })}\r\n                                    required\r\n                                    type=\"number\"\r\n                                />\r\n                            </div>\r\n                            {errors.speedMPH && errors.speedMPH.message ?\r\n                                <div className=\"alert alert-danger\">\r\n                                    {errors.speedMPH.message}\r\n                                </div>\r\n                                : null\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                    <div className={`card-footer ${!isOpen ? 'collapse' : null}`}>\r\n                        <button className=\"btn btn-success\" type=\"submit\"><span className=\"fa fa-check\"></span> Save</button>&nbsp;\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Target;\r\n","import React, { useState } from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\nimport './form.css'\r\n\r\nconst Weather = (props) => {\r\n    /*\r\n    props = {\r\n        values: {\r\n            altitudeFeet\r\n            temperatureDegreesFahrenheit\r\n            barometricPressureInchesHg\r\n            relativeHumidityPercent\r\n            windVelocityMPH\r\n            windAngleDegrees\r\n        }\r\n        onSubmit()\r\n    }\r\n    */\r\n    const [isOpen, setIsOpen] = useState(true);\r\n    const { register, errors, handleSubmit } = useForm({ mode: 'onBlur' });\r\n    return (\r\n        <div className=\"bal-form\">\r\n            <div className=\"card weather\">\r\n                <div className=\"card-heading bg-dark text-light d-flex p-2\">\r\n                    Weather\r\n                    <i className={`fa fa-fw ml-auto ${isOpen ? 'fa-chevron-down' : 'fa-chevron-right'}`} onClick={() => setIsOpen(!isOpen)}></i>\r\n                </div>\r\n                <form onSubmit={handleSubmit(props.onSubmit)}>\r\n                    <div className={`card-body ${!isOpen ? 'collapse' : null}`}>\r\n                        <div className=\"form-group\">\r\n                            <label\r\n                                className=\"control-label\"\r\n                                htmlFor=\"altitudeFeet\"\r\n                                data-toggle=\"tooltip\"\r\n                                title=\"Distance above sea level. Altitude is used to determine atmospheric density.\"\r\n                            >\r\n                                Altitude (feet)\r\n                            </label>\r\n                            <div className=\"input-group margin-bottom-sm\">\r\n                                <div className=\"input-group-prepend\"><div className=\"input-group-text\"><i className=\"fa fa-globe fa-fw\"></i></div></div>\r\n                                <input\r\n                                    className=\"form-control\"\r\n                                    defaultValue={props.values.altitudeFeet}\r\n                                    max=\"50000\"\r\n                                    min=\"0\"\r\n                                    name=\"altitudeFeet\"\r\n                                    placeholder=\"Altitude (feet)\"\r\n                                    ref={register({\r\n                                        max: { value: 50000, message: \"Altitude has a maximum value of 50000\" },\r\n                                        min: { value: 0, message: \"Altitude has a minimum value of 0\" },\r\n                                        required: \"Altitude is required to determine atmospheric density\"\r\n                                    })}\r\n                                    required\r\n                                    type=\"number\"\r\n                                />\r\n                            </div>\r\n                            {errors.altitudeFeet && errors.altitudeFeet.message ?\r\n                                <div className=\"alert alert-danger\">\r\n                                    {errors.altitudeFeet.message}\r\n                                </div>\r\n                                : null\r\n                            }\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label\r\n                                className=\"control-label\"\r\n                                htmlFor=\"temperatureDegreesFahrenheit\"\r\n                                data-toggle=\"tooltip\"\r\n                                title=\"Degree or intensity of heat in the atmosphere.\"\r\n                            >\r\n                                Temperature (fahrenheit)\r\n                            </label>\r\n                            <div className=\"input-group margin-bottom-sm\">\r\n                                <div className=\"input-group-prepend\"><div className=\"input-group-text\"><i className=\"fa fa-snowflake-o fa-fw\"></i></div></div>\r\n                                <input\r\n                                    className=\"form-control\"\r\n                                    defaultValue={props.values.temperatureDegreesFahrenheit}\r\n                                    max=\"200\"\r\n                                    min=\"0\"\r\n                                    name=\"temperatureDegreesFahrenheit\"\r\n                                    placeholder=\"Temperature (fahrenheit)\"\r\n                                    ref={register({\r\n                                        max: { value: 200, message: \"Temperature has a maximum value of 200\" },\r\n                                        min: { value: 0, message: \"Temperature has a minimum value of 0\" },\r\n                                        required: \"Temperature is required to determine atmospheric density\"\r\n                                    })}\r\n                                    required\r\n                                    type=\"number\"\r\n                                />\r\n                            </div>\r\n                            {errors.temperatureDegreesFahrenheit && errors.temperatureDegreesFahrenheit.message ?\r\n                                <div className=\"alert alert-danger\">\r\n                                    {errors.temperatureDegreesFahrenheit.message}\r\n                                </div>\r\n                                : null\r\n                            }\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label\r\n                                className=\"control-label\"\r\n                                htmlFor=\"barometricPressureInchesHg\"\r\n                                data-toggle=\"tooltip\"\r\n                                title=\"Air pressure in the atmosphere measured in inches Hg.\"\r\n                            >\r\n                                Barometric Pressure (in Hg)\r\n                            </label>\r\n                            <div className=\"input-group margin-bottom-sm\">\r\n                                <div className=\"input-group-prepend\"><div className=\"input-group-text\"><i className=\"fa fa-cloud fa-fw\"></i></div></div>\r\n                                <input\r\n                                    className=\"form-control\"\r\n                                    defaultValue={props.values.barometricPressureInchesHg}\r\n                                    max=\"100\"\r\n                                    min=\"0\"\r\n                                    name=\"barometricPressureInchesHg\"\r\n                                    placeholder=\"Barometric Pressure (in Hg)\"\r\n                                    ref={register({\r\n                                        max: { value: 100, message: \"Barometric Pressure has a maximum value of 100\" },\r\n                                        min: { value: 0, message: \"Barometric Pressure has a minimum value of 0\" },\r\n                                        required: \"Barometric Pressure is required to determine atmospheric density\"\r\n                                    })}\r\n                                    required\r\n                                    step=\"0.01\"\r\n                                    type=\"number\"\r\n                                />\r\n                            </div>\r\n                            {errors.barometricPressureInchesHg && errors.barometricPressureInchesHg.message ?\r\n                                <div className=\"alert alert-danger\">\r\n                                    {errors.barometricPressureInchesHg.message}\r\n                                </div>\r\n                                : null\r\n                            }\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label\r\n                                className=\"control-label\"\r\n                                htmlFor=\"relativeHumidityPercent\"\r\n                                data-toggle=\"tooltip\"\r\n                                title=\"The percentage of moisture in the atmosphere.\"\r\n                            >\r\n                                Relative Humidity (%)\r\n                            </label>\r\n                            <div className=\"input-group margin-bottom-sm\">\r\n                                <div className=\"input-group-prepend\"><div className=\"input-group-text\"><i className=\"fa fa-tint fa-fw\"></i></div></div>\r\n                                <input\r\n                                    className=\"form-control\"\r\n                                    defaultValue={props.values.relativeHumidityPercent}\r\n                                    max=\"100\"\r\n                                    min=\"0\"\r\n                                    name=\"relativeHumidityPercent\"\r\n                                    placeholder=\"Relative Humidity (%)\"\r\n                                    ref={register({\r\n                                        max: { value: 100, message: \"Relative Humidity has a maximum value of 100\" },\r\n                                        min: { value: 0, message: \"Relative Humidity has a minimum value of 0\" },\r\n                                        required: \"Relative Humidity is required to determine atmospheric density\"\r\n                                    })}\r\n                                    required\r\n                                    type=\"number\"\r\n                                />\r\n                            </div>\r\n                            {errors.relativeHumidityPercent && errors.relativeHumidityPercent.message ?\r\n                                <div className=\"alert alert-danger\">\r\n                                    {errors.relativeHumidityPercent.message}\r\n                                </div>\r\n                                : null\r\n                            }\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label\r\n                                className=\"control-label\"\r\n                                htmlFor=\"windVelocityMPH\"\r\n                                data-toggle=\"tooltip\"\r\n                                title=\"Wind velocity is required to calculate bullet drift.\"\r\n                            >\r\n                                Wind Velocity (MPH)\r\n                            </label>\r\n                            <div className=\"input-group margin-bottom-sm\">\r\n                                <div className=\"input-group-prepend\"><div className=\"input-group-text\"><i className=\"fa fa-flag fa-fw\"></i></div></div>\r\n                                <input\r\n                                    className=\"form-control\"\r\n                                    defaultValue={props.values.windVelocityMPH}\r\n                                    max=\"200\"\r\n                                    min=\"0\"\r\n                                    name=\"windVelocityMPH\"\r\n                                    placeholder=\"Wind Velocity (MPH)\"\r\n                                    ref={register({\r\n                                        max: { value: 200, message: \"Wind Velocity has a maximum value of 200\" },\r\n                                        min: { value: 0, message: \"Wind Velocity has a minimum value of 0\" },\r\n                                        required: \"Wind Velocity is required to calculate bullet drift\"\r\n                                    })}\r\n                                    required\r\n                                    type=\"number\"\r\n                                />\r\n                            </div>\r\n                            {errors.windVelocityMPH && errors.windVelocityMPH.message ?\r\n                                <div className=\"alert alert-danger\">\r\n                                    {errors.windVelocityMPH.message}\r\n                                </div>\r\n                                : null\r\n                            }\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label\r\n                                className=\"control-label\"\r\n                                htmlFor=\"windAngleDegrees\"\r\n                                data-toggle=\"tooltip\"\r\n                                title=\"Wind velocity is required to calculate bullet drift.\"\r\n                            >\r\n                                Wind Angle (degrees)\r\n                            </label>\r\n                            <div className=\"input-group margin-bottom-sm\">\r\n                                <div className=\"input-group-prepend\"><div className=\"input-group-text\"><i className=\"fa fa-line-chart fa-fw\"></i></div></div>\r\n                                <input\r\n                                    className=\"form-control\"\r\n                                    defaultValue={props.values.windAngleDegrees}\r\n                                    max=\"90\"\r\n                                    min=\"0\"\r\n                                    name=\"windAngleDegrees\"\r\n                                    placeholder=\"Wind Angle (degrees)\"\r\n                                    ref={register({\r\n                                        max: { value: 90, message: \"windVelocity has a maximum value of 90\" },\r\n                                        min: { value: 0, message: \"windVelocity has a minimum value of 0\" },\r\n                                        required: \"Wind Angle is required to determine the winds vector impact on bullet drift\"\r\n                                    })}\r\n                                    required\r\n                                    type=\"number\"\r\n                                />\r\n                            </div>\r\n                            {errors.windAngleDegrees && errors.windAngleDegrees.message ?\r\n                                <div className=\"alert alert-danger\">\r\n                                    {errors.windAngleDegrees.message}\r\n                                </div>\r\n                                : null\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                    <div className={`card-footer ${!isOpen ? 'collapse' : null}`}>\r\n                        <button className=\"btn btn-success\" type=\"submit\"><span className=\"fa fa-check\"></span> Save</button>&nbsp;\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Weather;\r\n","import React, {useState} from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {\r\n    // Actions\r\n    deleteFirearm,\r\n    deleteRound,\r\n    insertFirearm,\r\n    insertRound,\r\n    selectFirearm,\r\n    selectRound,\r\n    updateFirearm,\r\n    updateFirearms,\r\n    updateRound,\r\n    updateTarget,\r\n    updateWeather,\r\n    // Selectors\r\n    selectorFirearmId,\r\n    selectorFirearms,\r\n    selectorRoundId,\r\n    selectorTarget,\r\n    selectorWeather\r\n} from './appSlice';\r\n\r\nimport {toast}  from 'react-toastify' // Must be initialized in App.js (see https://github.com/fkhadra/react-toastify#usage)\r\nimport ballistics from 'pg-ballistics'\r\nimport utilities from 'pg-utilities'\r\nimport 'react-toastify/dist/ReactToastify.min.css';\r\n\r\nimport 'animate.css/animate.min.css';\r\nimport 'bootstrap/dist/css//bootstrap.min.css';\r\nimport 'font-awesome/css/font-awesome.min.css';\r\nimport 'react-toastify/dist/ReactToastify.min.css';\r\nimport css from './app.module.css';\r\n\r\nimport Chart from './components/Chart';\r\nimport D3Graph from './components/D3Graph';\r\nimport Firearm from './components/Firearm';\r\nimport Firearms from './components/Firearms';\r\nimport Round from './components/Round';\r\nimport Rounds from './components/Rounds';\r\nimport Target from './components/Target';\r\nimport Weather from './components/Weather';\r\n\r\n\r\nconst App = () => {\r\n    // Call it once in your app. At the root of your app is the best place\r\n    toast.configure();\r\n\r\n    // Getter functions (all should be pure functions)\r\n    const getFirearm = (firearms, firearmId) => {\r\n        // Get firearm from firearms array using firearmId\r\n        let firearm = null;\r\n        if(firearmId != null) {\r\n            if(firearmId==='Add') {\r\n                firearm = {\r\n                    id: 'Add',\r\n                    name: '',\r\n                    elevationTurretGradients: 10,\r\n                    reticleUnits: 'Mil',\r\n                    rounds: [],\r\n                    sightHeightInches: 2.0,\r\n                    turretUnits: 'Mil',\r\n                    windageTurretGradients: 10,\r\n                    zeroRangeUnits: 'Yards',\r\n                    zeroRange: 100\r\n                }\r\n            } else {\r\n                firearm = firearms.find((f) => f.id===firearmId);\r\n            }\r\n        }\r\n        return firearm;\r\n    }\r\n    const getRound = (firearm, roundId) => {\r\n        // Get round from firearm.rounds array using roundId\r\n        let round = null;\r\n        if(firearm != null && roundId != null) {\r\n            if(roundId==='Add') {\r\n                round = {\r\n                    id: 'Add',\r\n                    name: '',\r\n                    bulletDiameterInches: null,\r\n                    bulletWeightGrains: null,\r\n                    muzzleVelocityFPS: null\r\n                }\r\n            } else if(firearm.rounds && firearm.rounds.length>0) {\r\n                round = firearm.rounds.find((r) => r.id===roundId);\r\n            }\r\n        }\r\n        return round;\r\n    }\r\n    // Event Handlers\r\n    const handleDataImport = (event) => {\r\n        if (!event.target.files || event.target.files.length !== 1) {\r\n            toast.error(`No file selected`, {\r\n                distance: \"top-center\",\r\n                autoClose: 2000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true\r\n            });\r\n        } else {\r\n            const reader = new FileReader();\r\n            reader.onloadend = () => {\r\n                // handle data processing\r\n                const importedState = utilities.jsonParseNumbers(reader.result.toString());\r\n                console.log(`Imported State`);\r\n                console.log(importedState);\r\n                dispatch(updateFirearms(importedState.firearms));\r\n                dispatch(updateTarget(importedState.target));\r\n                dispatch(updateWeather(importedState.weather));\r\n                dispatch(selectFirearm(importedState.firearmId));\r\n                dispatch(selectRound(importedState.roundId));\r\n            };\r\n            reader.readAsText(event.target.files[0]);\r\n        }\r\n    }\r\n    const handleDataExport = () => {\r\n        const json = JSON.stringify({\r\n            firearmId: firearmId,\r\n            firearms: firearms,\r\n            roundId: roundId,\r\n            target: target,\r\n            weather: weather\r\n        });\r\n        const blob = new Blob([json],{type:'application/json'});\r\n        const href = URL.createObjectURL(blob);\r\n        const link = document.createElement('a');\r\n        link.href = href;\r\n        link.download = 'ballisticsData.json';\r\n        document.body.appendChild(link);\r\n        link.click();\r\n        document.body.removeChild(link);\r\n    }\r\n    const handleFirearmOnAdd = () => {\r\n        dispatch(selectRound(null));\r\n        dispatch(selectFirearm('Add'));\r\n    }\r\n    const handleFirearmOnClose = () => {\r\n        dispatch(selectRound(null));\r\n        dispatch(selectFirearm(null));\r\n    }\r\n    const handleFirearmOnDelete = (firearm) => {\r\n        ////////////////////////////////////////////////////////////////////////////////\r\n        /////////////////////////// NEED CONFIRMATION DIALOG ///////////////////////////\r\n        ////////////////////////////////////////////////////////////////////////////////\r\n        if(firearms.find((f) => f.id===firearm.id) === undefined) {\r\n            toast.error(`Firearm Not Found`, {\r\n                distance: \"top-center\",\r\n                autoClose: 2000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true\r\n            });\r\n        } else {\r\n            if(firearmId===firearm.id) {\r\n                dispatch(selectRound(null));\r\n                dispatch(selectFirearm(null));\r\n            }\r\n            dispatch(deleteFirearm(firearm.id));\r\n            toast.success(`Firearm Deleted`, {\r\n                distance: \"top-center\",\r\n                autoClose: 2000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true\r\n            });\r\n        }\r\n    }\r\n    const handleFirearmOnSelect = (firearm) => {\r\n        dispatch(selectFirearm(firearm.id));\r\n    }\r\n    const handleFirearmOnSubmit = (firearm) => {\r\n        // Find by name rather than id to ensure the name remains unique\r\n        if(firearms.find((f) => f.name===firearm.name) !== undefined) {\r\n            toast.error(`Name already exists - Firearm not added`, {\r\n                distance: \"top-center\",\r\n                autoClose: 2000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true\r\n            });\r\n        } else if(firearm.id==='Add') {\r\n            dispatch(insertFirearm(firearm));\r\n            dispatch(selectFirearm(firearm.id));\r\n            toast.success(`Firearm Added`, {\r\n                distance: \"top-center\",\r\n                autoClose: 2000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true\r\n            });\r\n        } else {\r\n            dispatch(updateFirearm(firearm));\r\n            toast.success(`Firearm Updated`, {\r\n                distance: \"top-center\",\r\n                autoClose: 2000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true\r\n            });\r\n        }\r\n    }\r\n    const handleGraphTypeChange = () => {\r\n        graphType==='line' ? setGraphType('bar') : setGraphType('line');\r\n    }\r\n    const handleRoundOnAdd = () => {\r\n        dispatch(selectRound('Add'));\r\n    }\r\n    const handleRoundOnClose = () => {\r\n        dispatch(selectRound(null));\r\n    }\r\n    const handleRoundOnDelete = (firearmId, round) => {\r\n        ////////////////////////////////////////////////////////////////////////////////\r\n        /////////////////////////// NEED CONFIRMATION DIALOG ///////////////////////////\r\n        ////////////////////////////////////////////////////////////////////////////////\r\n        const firearmIndex = firearms.findIndex((f) => f.id===firearmId);\r\n        if(firearmIndex === -1) {\r\n            toast.error(`Firearm Not Found`, {\r\n                distance: \"top-center\",\r\n                autoClose: 2000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true\r\n            });\r\n        } else {\r\n            if(firearms[firearmIndex].find((r) => r.id===round.id) === undefined) {\r\n                toast.error(`Round Not Found`, {\r\n                    distance: \"top-center\",\r\n                    autoClose: 2000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true\r\n                });\r\n            } else {\r\n                if(roundId===round.id) {\r\n                    dispatch(selectRound(null));\r\n                }\r\n                dispatch(deleteRound({firearmId: firearmId, roundId: round.id}));\r\n                toast.success(`Round Deleted`, {\r\n                    distance: \"top-center\",\r\n                    autoClose: 2000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true\r\n                });\r\n            }\r\n        }\r\n    }\r\n    const handleRoundOnSelect = (round) => {\r\n        dispatch(selectRound(round.id));\r\n    }\r\n    const handleRoundOnSubmit = (firearmId, round) => {\r\n        const firearmIndex = firearms.findIndex((f) => f.id===firearmId);\r\n        if(firearmIndex === -1) {\r\n            toast.error(`Firearm Not Found`, {\r\n                distance: \"top-center\",\r\n                autoClose: 2000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true\r\n            });\r\n        } else {\r\n            // Find by name rather than id to ensure the name remains unique\r\n            if(firearms[firearmIndex].rounds.find((r) => r.name===round.name) !== undefined) {\r\n                toast.error(`Name already exists - Round not added`, {\r\n                    distance: \"top-center\",\r\n                    autoClose: 2000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true\r\n                });\r\n            } else if(round.id==='Add') {\r\n                dispatch(insertRound(round));\r\n                dispatch(selectRound(round.id));\r\n                toast.success(`Firearm Added`, {\r\n                    distance: \"top-center\",\r\n                    autoClose: 2000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true\r\n                });\r\n            } else {\r\n                dispatch(updateRound(round));\r\n                toast.success(`Round Updated`, {\r\n                    distance: \"top-center\",\r\n                    autoClose: 2000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true\r\n                });\r\n            }\r\n        }\r\n    }\r\n    const handleTargetOnSubmit = (values) => {\r\n        // Don't save sizeMils\r\n        values.sizeMils = null;\r\n        dispatch(updateTarget(values));\r\n        toast.success(`Target Data Saved`, {\r\n            distance: \"top-center\",\r\n            autoClose: 2000,\r\n            hideProgressBar: false,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true\r\n        });\r\n    }\r\n    const handleWeatherOnSubmit = (values) => {\r\n        dispatch(updateWeather(values));\r\n        toast.success('Weather Data Saved', {\r\n            position: \"top-center\",\r\n            autoClose: 2000,\r\n            hideProgressBar: false,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true\r\n        });\r\n    }\r\n    // Get watched data\r\n    const dispatch = useDispatch();\r\n    let firearmId = useSelector(selectorFirearmId);\r\n    let firearms = useSelector(selectorFirearms);\r\n    let roundId = useSelector(selectorRoundId);\r\n    let target = useSelector(selectorTarget);\r\n    let weather = useSelector(selectorWeather);\r\n    const [graphType, setGraphType] = useState('line');\r\n    // Get unwatched data\r\n    let firearm = getFirearm(firearms, firearmId);\r\n    let round = getRound(firearm, roundId);\r\n    let rangeData = ballistics.getRangeData(weather, target, firearm, round);\r\n    const graphHeight = 300;\r\n\tconst graphWidth = 300;\r\n    // Render UI\r\n    return (\r\n        <div className={`container-fluid ${css.app}`}>\r\n            <div>\r\n                <label className=\"btn btn-info\" onChange={handleDataImport}>\r\n                    Import <input type=\"file\" multiple={false} accept=\".json\" hidden />\r\n                </label>\r\n                &nbsp;\r\n                <label className=\"btn btn-info\" onClick={handleDataExport}>Export</label>\r\n            </div>\r\n            <div className=\"d-flex flex-row flex-wrap justify-content-center\">\r\n                <Weather values={weather} onSubmit={(values) => handleWeatherOnSubmit(values)}/>\r\n                <Target values={target} onSubmit={(values) => handleTargetOnSubmit(values)}/>\r\n                {firearmId===null ?\r\n                    <Firearms firearms={firearms} onAdd={() => handleFirearmOnAdd()} onSelect={(firearm) => handleFirearmOnSelect(firearm)}/>\r\n                    :\r\n                    <React.Fragment>\r\n                        <Firearm firearm={firearm} onClose={() => handleFirearmOnClose()} onDelete={(firearm) => handleFirearmOnDelete(firearm)} onSubmit={(firearm) => handleFirearmOnSubmit(firearm)}/>\r\n                        {firearmId!=='Add' ? round==null ?\r\n                            <Rounds rounds={firearm.rounds} onAdd={() => handleRoundOnAdd()} onSelect={(round) => handleRoundOnSelect(round)}/>\r\n                            :\r\n                            <Round round={round} onClose={() => handleRoundOnClose()} onDelete={(round) => handleRoundOnDelete(firearm.id, round)} onSubmit={(round) => handleRoundOnSubmit(round)}/>\r\n                            : null\r\n                        }\r\n                    </React.Fragment>\r\n                }\r\n            </div>\r\n            <div className=\"d-flex flex-fill justify-content-center\">\r\n                {firearm && round && roundId!=='Add' ?\r\n                    <Chart firearm={firearm} rangeData={rangeData} round={round} target={target} weather={weather}/>\r\n                    : null\r\n                }\r\n            </div>\r\n            {firearm && round && roundId!=='Add' ?\r\n                <React.Fragment>\r\n                    <br/>\r\n                    <button className='btn btn-success' onClick={handleGraphTypeChange}>Change Graph Type</button>\r\n                    <div className=\"d-flex flex-fill flex-row flex-wrap justify-content-center\">\r\n                        <div className=\"graph-inline\">\r\n                            <h4>Velocity (feet/sec)</h4>\r\n                            <D3Graph type={graphType} data={rangeData} xKey=\"rangeYards\" yKey=\"velocityFPS\" width={graphWidth} height={graphHeight} labels=\"none\" yToFixed={0} />\r\n                        </div>\r\n                        <div className=\"graph-inline\">\r\n                            <h4>Energy (foot pounds)</h4>\r\n                            <D3Graph type={graphType} data={rangeData} xKey=\"rangeYards\" yKey=\"energyFtLbs\" width={graphWidth} height={graphHeight} labels=\"none\" yToFixed={0} />\r\n                        </div>\r\n                        <div className=\"graph-inline\">\r\n                            <h4>Time (seconds)</h4>\r\n                            <D3Graph type={graphType} data={rangeData} xKey=\"rangeYards\" yKey=\"timeSeconds\" width={graphWidth} height={graphHeight} labels=\"none\" yToFixed={2} />\r\n                        </div>\r\n                        <div className=\"graph-inline\">\r\n                            <h4>Drop (inches)</h4>\r\n                            <D3Graph type={graphType} data={rangeData} xKey=\"rangeYards\" yKey=\"dropInches\" width={graphWidth} height={graphHeight} labels=\"none\" yToFixed={1} />\r\n                        </div>\r\n                        <div className=\"graph-inline\">\r\n                            <h4>Elevation (inches)</h4>\r\n                            <D3Graph type={graphType} data={rangeData} xKey=\"rangeYards\" yKey=\"verticalPositionInches\" width={graphWidth} height={graphHeight} labels=\"none\" yToFixed={1} />\r\n                        </div>\r\n                        <div className=\"graph-inline\">\r\n                            <h4>Cross Wind Drift (inches)</h4>\r\n                            <D3Graph type={graphType} data={rangeData} xKey=\"rangeYards\" yKey=\"crossWindDriftInches\" width={graphWidth} height={graphHeight} labels=\"none\" yToFixed={1} />\r\n                        </div>\r\n                        <div className=\"graph-inline\">\r\n                            <h4>Lead (inches)</h4>\r\n                            <D3Graph type={graphType} data={rangeData} xKey=\"rangeYards\" yKey=\"leadInches\" width={graphWidth} height={graphHeight} labels=\"none\" yToFixed={1} />\r\n                        </div>\r\n                        <div className=\"graph-inline\">\r\n                            <h4>Slant (inches - hold low)</h4>\r\n                            <D3Graph type={graphType} data={rangeData} xKey=\"rangeYards\" yKey=\"slantDropInches\" width={graphWidth} height={graphHeight} labels=\"none\" yToFixed={1} />\r\n                        </div>\r\n                    </div>\r\n                </React.Fragment>\r\n                : null\r\n            }\r\n        </div>\r\n    );\r\n}\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport appReducer from './appSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    app: appReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <App />,\r\n    </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"app_app__3Yyze\"};"],"sourceRoot":""}